<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Forgot Password - Your Blog Platform</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
      }

      .auth-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 40px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 450px;
        animation: fadeIn 0.5s ease;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .auth-header {
        text-align: center;
        margin-bottom: 30px;
      }

      .auth-title {
        font-size: 2.5em;
        color: #333;
        margin-bottom: 10px;
        background: linear-gradient(45deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .auth-subtitle {
        color: #666;
        font-size: 1.1em;
        line-height: 1.5;
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #333;
      }

      .form-input {
        width: 100%;
        padding: 15px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s ease;
        background: white;
      }

      .form-input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      }

      .form-input.error {
        border-color: #dc3545;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
      }

      .form-input.valid {
        border-color: #28a745;
        box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
      }

      .input-help {
        font-size: 14px;
        margin-top: 5px;
        color: #666;
      }

      .input-error {
        font-size: 14px;
        margin-top: 5px;
        color: #dc3545;
        display: none;
      }

      .auth-btn {
        width: 100%;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 15px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-bottom: 20px;
      }

      .auth-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      }

      .auth-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
      }

      .auth-links {
        text-align: center;
        margin-top: 20px;
      }

      .auth-link {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
      }

      .auth-link:hover {
        color: #764ba2;
        text-decoration: underline;
      }

      .divider {
        text-align: center;
        margin: 20px 0;
        position: relative;
        color: #666;
      }

      .divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: #e1e5e9;
      }

      .divider span {
        background: rgba(255, 255, 255, 0.95);
        padding: 0 15px;
      }

      .alert {
        padding: 12px 15px;
        border-radius: 6px;
        margin-bottom: 20px;
        font-size: 14px;
        display: none;
      }

      .alert.show {
        display: block;
      }

      .alert-error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }

      .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }

      .alert-info {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
      }

      .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      .step-container {
        transition: all 0.3s ease;
      }

      .step-container.hidden {
        display: none;
      }

      .back-btn {
        background: transparent;
        color: #667eea;
        border: 2px solid #667eea;
        padding: 10px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-right: 10px;
      }

      .back-btn:hover {
        background: #667eea;
        color: white;
      }

      .verification-info {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        text-align: center;
      }

      .verification-info h3 {
        color: #495057;
        margin-bottom: 10px;
        font-size: 1.2em;
      }

      .verification-info p {
        color: #6c757d;
        margin-bottom: 15px;
        line-height: 1.5;
      }

      .resend-timer {
        color: #6c757d;
        font-size: 14px;
        margin-top: 10px;
      }

      @media (max-width: 480px) {
        .auth-container {
          padding: 30px 20px;
        }

        .auth-title {
          font-size: 2em;
        }
      }
    </style>
  </head>
  <body>
    <div class="auth-container">
      <!-- Step 1: Enter Email -->
      <div id="step1" class="step-container">
        <div class="auth-header">
          <h1 class="auth-title">Forgot Password?</h1>
          <p class="auth-subtitle">
            Enter your email address and we'll send you a link to reset your
            password
          </p>
        </div>

        <% if (typeof error !== 'undefined' && error) { %>
        <div class="alert alert-error show"><%= error %></div>
        <% } %> <% if (typeof success !== 'undefined' && success) { %>
        <div class="alert alert-success show"><%= success %></div>
        <% } %>

        <div id="alertContainer"></div>

        <form id="forgotPasswordForm">
          <div class="form-group">
            <label for="email" class="form-label">Email Address</label>
            <input
              type="email"
              id="email"
              name="email"
              class="form-input"
              required
              placeholder="Enter your registered email"
              value="<%= typeof formData !== 'undefined' ? formData.email || '' : '' %>"
            />
            <div id="emailError" class="input-error"></div>
            <div class="input-help">
              We'll send a password reset link to this email address
            </div>
          </div>

          <button type="submit" class="auth-btn" id="submitBtn">
            <span id="btnText">Send Reset Link</span>
            <span id="btnLoading" class="loading" style="display: none"></span>
          </button>
        </form>

        <div class="auth-links">
          <p>
            Remember your password?
            <a href="/auth/login" class="auth-link">Sign in here</a>
          </p>
          <p style="margin-top: 10px">
            Don't have an account?
            <a href="/auth/register" class="auth-link">Sign up here</a>
          </p>
        </div>
      </div>

      <!-- Step 2: Email Sent Confirmation -->
      <div id="step2" class="step-container hidden">
        <div class="auth-header">
          <h1 class="auth-title">Check Your Email</h1>
          <p class="auth-subtitle">
            We've sent a password reset link to your email
          </p>
        </div>

        <div class="verification-info">
          <h3>üìß Email Sent Successfully!</h3>
          <p>
            We've sent a password reset link to <strong id="sentEmail"></strong>
          </p>
          <p>
            Click the link in the email to reset your password. The link will
            expire in 15 minutes for security reasons.
          </p>
          <p style="margin-bottom: 0">
            Didn't receive the email? Check your spam folder or
            <button
              type="button"
              id="resendBtn"
              class="auth-link"
              style="
                background: none;
                border: none;
                padding: 0;
                font-size: inherit;
                cursor: pointer;
              "
            >
              resend the email
            </button>
          </p>
          <div id="resendTimer" class="resend-timer"></div>
        </div>

        <div class="auth-links">
          <button type="button" class="back-btn" onclick="goBackToStep1()">
            ‚Üê Back to Email Entry
          </button>
          <a href="/auth/login" class="auth-link">Back to Login</a>
        </div>
      </div>
    </div>

    <script>
      let resendCooldown = 0
      let resendTimer

      // Email validation regex
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/

      // Validate email input
      function validateEmail(email) {
        const errors = []

        if (!email) {
          errors.push('Email is required')
        } else if (!emailRegex.test(email)) {
          errors.push('Please enter a valid email address')
        } else if (email.length > 254) {
          errors.push('Email address is too long')
        }

        return errors
      }

      // Show validation feedback
      function showFieldValidation(fieldId, errors) {
        const field = document.getElementById(fieldId)
        const errorDiv = document.getElementById(fieldId + 'Error')

        if (errors.length > 0) {
          field.classList.add('error')
          field.classList.remove('valid')
          errorDiv.textContent = errors[0]
          errorDiv.style.display = 'block'
          return false
        } else {
          field.classList.remove('error')
          field.classList.add('valid')
          errorDiv.style.display = 'none'
          return true
        }
      }

      // Show alert message
      function showAlert(message, type) {
        const alertContainer = document.getElementById('alertContainer')
        const alertDiv = document.createElement('div')
        alertDiv.className = `alert alert-${type} show`
        alertDiv.textContent = message

        // Clear existing alerts
        alertContainer.innerHTML = ''
        alertContainer.appendChild(alertDiv)

        // Auto-remove after 5 seconds for success messages
        if (type === 'success') {
          setTimeout(() => {
            alertDiv.remove()
          }, 5000)
        }
      }

      // Handle forgot password form submission
      document
        .getElementById('forgotPasswordForm')
        .addEventListener('submit', async function (e) {
          e.preventDefault()

          const email = document.getElementById('email').value.trim()
          const submitBtn = document.getElementById('submitBtn')
          const btnText = document.getElementById('btnText')
          const btnLoading = document.getElementById('btnLoading')

          // Validate email
          const emailErrors = validateEmail(email)
          const emailValid = showFieldValidation('email', emailErrors)

          if (!emailValid) {
            return
          }

          // Show loading state
          submitBtn.disabled = true
          btnText.style.display = 'none'
          btnLoading.style.display = 'inline-block'

          // Clear previous alerts
          document.getElementById('alertContainer').innerHTML = ''

          try {
            const response = await fetch('/api/auth/forgot-password', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email })
            })

            const result = await response.json()

            if (response.ok) {
              // Success - show step 2
              document.getElementById('sentEmail').textContent = email
              showStep2()
              startResendCooldown(60) // 60 seconds cooldown
            } else {
              // Error - show error message
              showAlert(
                result.message ||
                  'Failed to send reset email. Please try again.',
                'error'
              )
            }
          } catch (error) {
            console.error('Forgot password error:', error)
            showAlert(
              'Network error. Please check your connection and try again.',
              'error'
            )
          } finally {
            // Reset button state
            submitBtn.disabled = false
            btnText.style.display = 'inline'
            btnLoading.style.display = 'none'
          }
        })

      // Show step 2 (email sent confirmation)
      function showStep2() {
        document.getElementById('step1').classList.add('hidden')
        document.getElementById('step2').classList.remove('hidden')
      }

      // Go back to step 1
      function goBackToStep1() {
        document.getElementById('step2').classList.add('hidden')
        document.getElementById('step1').classList.remove('hidden')

        // Clear any alerts
        document.getElementById('alertContainer').innerHTML = ''
      }

      // Handle resend email
      document
        .getElementById('resendBtn')
        .addEventListener('click', async function () {
          if (resendCooldown > 0) return

          const email = document.getElementById('email').value.trim()
          const resendBtn = this

          resendBtn.style.opacity = '0.6'
          resendBtn.style.cursor = 'not-allowed'

          try {
            const response = await fetch('/api/auth/forgot-password', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ email, resend: true })
            })

            const result = await response.json()

            if (response.ok) {
              showAlert('Reset email sent successfully!', 'success')
              startResendCooldown(60)
            } else {
              showAlert(result.message || 'Failed to resend email', 'error')
            }
          } catch (error) {
            showAlert('Network error. Please try again.', 'error')
          } finally {
            if (resendCooldown === 0) {
              resendBtn.style.opacity = '1'
              resendBtn.style.cursor = 'pointer'
            }
          }
        })

      // Start resend cooldown timer
      function startResendCooldown(seconds) {
        resendCooldown = seconds
        const resendBtn = document.getElementById('resendBtn')
        const resendTimerDiv = document.getElementById('resendTimer')

        resendBtn.style.opacity = '0.6'
        resendBtn.style.cursor = 'not-allowed'

        resendTimer = setInterval(() => {
          resendCooldown--
          resendTimerDiv.textContent = `You can resend the email in ${resendCooldown} seconds`

          if (resendCooldown <= 0) {
            clearInterval(resendTimer)
            resendBtn.style.opacity = '1'
            resendBtn.style.cursor = 'pointer'
            resendTimerDiv.textContent = ''
          }
        }, 1000)
      }

      // Real-time email validation
      document.getElementById('email').addEventListener('input', function () {
        const email = this.value.trim()
        if (email) {
          const errors = validateEmail(email)
          showFieldValidation('email', errors)
        } else {
          this.classList.remove('error', 'valid')
          document.getElementById('emailError').style.display = 'none'
        }
      })

      // Validate on blur
      document.getElementById('email').addEventListener('blur', function () {
        const email = this.value.trim()
        const errors = validateEmail(email)
        showFieldValidation('email', errors)
      })

      // Clear validation styles on focus
      document.getElementById('email').addEventListener('focus', function () {
        if (!this.value.trim()) {
          this.classList.remove('error', 'valid')
          document.getElementById('emailError').style.display = 'none'
        }
      })

      // Auto-focus email input
      document.getElementById('email').focus()
    </script>
  </body>
</html>
