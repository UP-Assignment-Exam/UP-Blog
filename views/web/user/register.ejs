<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Register - Your Blog Platform</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
      }

      .auth-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 40px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 500px;
        animation: fadeIn 0.5s ease;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .auth-header {
        text-align: center;
        margin-bottom: 30px;
      }

      .auth-title {
        font-size: 2.5em;
        color: #333;
        margin-bottom: 10px;
        background: linear-gradient(45deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .auth-subtitle {
        color: #666;
        font-size: 1.1em;
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
      }

      .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #333;
      }

      .form-input {
        width: 100%;
        padding: 15px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s ease;
        background: white;
      }

      .form-input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      }

      .form-input.valid {
        border-color: #28a745;
      }

      .form-input.invalid {
        border-color: #dc3545;
      }

      .password-container {
        position: relative;
      }

      .password-toggle {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        font-size: 18px;
      }

      .password-strength {
        margin-top: 8px;
        font-size: 14px;
      }

      .strength-bar {
        height: 4px;
        background: #e1e5e9;
        border-radius: 2px;
        margin-top: 5px;
        overflow: hidden;
      }

      .strength-fill {
        height: 100%;
        border-radius: 2px;
        transition: all 0.3s ease;
        width: 0%;
      }

      .strength-weak .strength-fill {
        background: #dc3545;
        width: 25%;
      }

      .strength-fair .strength-fill {
        background: #ffc107;
        width: 50%;
      }

      .strength-good .strength-fill {
        background: #17a2b8;
        width: 75%;
      }

      .strength-strong .strength-fill {
        background: #28a745;
        width: 100%;
      }

      .checkbox-container {
        display: flex;
        align-items: flex-start;
        gap: 10px;
        margin-bottom: 20px;
      }

      .checkbox-container input[type='checkbox'] {
        margin-top: 4px;
      }

      .checkbox-label {
        font-size: 14px;
        color: #666;
        line-height: 1.4;
      }

      .checkbox-label a {
        color: #667eea;
        text-decoration: none;
      }

      .checkbox-label a:hover {
        text-decoration: underline;
      }

      .auth-btn {
        width: 100%;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 15px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-bottom: 20px;
      }

      .auth-btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      }

      .auth-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
      }

      .auth-links {
        text-align: center;
        margin-top: 20px;
      }

      .auth-link {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
      }

      .auth-link:hover {
        color: #764ba2;
        text-decoration: underline;
      }

      .alert {
        padding: 12px 15px;
        border-radius: 6px;
        margin-bottom: 20px;
        font-size: 14px;
      }

      .alert-error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }

      .alert-success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }

      .field-error {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
      }

      .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      @media (max-width: 580px) {
        .form-row {
          grid-template-columns: 1fr;
        }

        .auth-container {
          padding: 30px 20px;
        }

        .auth-title {
          font-size: 2em;
        }
      }
    </style>
  </head>
  <body>
    <div class="auth-container">
      <div class="auth-header">
        <h1 class="auth-title">Join Us</h1>
        <p class="auth-subtitle">Create your account to get started</p>
      </div>

      <% if (typeof error !== 'undefined' && error) { %>
      <div class="alert alert-error"><%= error %></div>
      <% } %> <% if (typeof success !== 'undefined' && success) { %>
      <div class="alert alert-success"><%= success %></div>
      <% } %>

      <form id="registerForm" action="/api/auth/register" method="POST">
        <div class="form-row">
          <div class="form-group">
            <label for="firstName" class="form-label">First Name</label>
            <input
              type="text"
              id="firstName"
              name="firstName"
              class="form-input"
              required
              placeholder="John"
              value="<%= typeof formData !== 'undefined' ? formData.firstName || '' : '' %>"
            />
            <div class="field-error" id="firstNameError"></div>
          </div>

          <div class="form-group">
            <label for="lastName" class="form-label">Last Name</label>
            <input
              type="text"
              id="lastName"
              name="lastName"
              class="form-input"
              required
              placeholder="Doe"
              value="<%= typeof formData !== 'undefined' ? formData.lastName || '' : '' %>"
            />
            <div class="field-error" id="lastNameError"></div>
          </div>
        </div>

        <div class="form-group">
          <label for="email" class="form-label">Email Address</label>
          <input
            type="email"
            id="email"
            name="email"
            class="form-input"
            required
            placeholder="john@example.com"
            value="<%= typeof formData !== 'undefined' ? formData.email || '' : '' %>"
          />
          <div class="field-error" id="emailError"></div>
        </div>

        <div class="form-group">
          <label for="password" class="form-label">Password</label>
          <div class="password-container">
            <input
              type="password"
              id="password"
              name="password"
              class="form-input"
              required
              placeholder="Create a strong password"
            />
            <button
              type="button"
              class="password-toggle"
              onclick="togglePassword('password')"
            >
              üëÅÔ∏è
            </button>
          </div>
          <div class="password-strength">
            <div class="strength-text">
              Password strength: <span id="strengthText">Too short</span>
            </div>
            <div class="strength-bar">
              <div class="strength-fill" id="strengthFill"></div>
            </div>
          </div>
          <div class="field-error" id="passwordError"></div>
        </div>

        <div class="form-group">
          <label for="confirmPassword" class="form-label"
            >Confirm Password</label
          >
          <div class="password-container">
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              class="form-input"
              required
              placeholder="Confirm your password"
            />
            <button
              type="button"
              class="password-toggle"
              onclick="togglePassword('confirmPassword')"
            >
              üëÅÔ∏è
            </button>
          </div>
          <div class="field-error" id="confirmPasswordError"></div>
        </div>

        <div class="checkbox-container">
          <input type="checkbox" id="terms" name="terms" required />
          <label for="terms" class="checkbox-label">
            I agree to the
            <a href="/terms" target="_blank">Terms of Service</a> and
            <a href="/privacy" target="_blank">Privacy Policy</a>
          </label>
        </div>

        <div class="checkbox-container">
          <input type="checkbox" id="newsletter" name="newsletter" />
          <label for="newsletter" class="checkbox-label">
            I'd like to receive updates and marketing communications
          </label>
        </div>

        <button type="submit" class="auth-btn" id="registerBtn">
          <span id="btnText">Create Account</span>
          <span id="btnLoading" class="loading" style="display: none"></span>
        </button>
      </form>

      <div class="auth-links">
        <p>
          Already have an account?
          <a href="/auth/login" class="auth-link">Sign in here</a>
        </p>
      </div>
    </div>

    <script>
      // Toggle password visibility
      function togglePassword(fieldId) {
        const passwordInput = document.getElementById(fieldId)
        const toggleBtn = passwordInput.nextElementSibling

        if (passwordInput.type === 'password') {
          passwordInput.type = 'text'
          toggleBtn.textContent = 'üôà'
        } else {
          passwordInput.type = 'password'
          toggleBtn.textContent = 'üëÅÔ∏è'
        }
      }

      // Password strength checker
      function checkPasswordStrength(password) {
        let strength = 0
        let feedback = 'Too short'

        if (password.length >= 8) strength++
        if (password.length >= 12) strength++
        if (/[a-z]/.test(password)) strength++
        if (/[A-Z]/.test(password)) strength++
        if (/[0-9]/.test(password)) strength++
        if (/[^A-Za-z0-9]/.test(password)) strength++

        const strengthBar = document.querySelector('.strength-bar')
        const strengthText = document.getElementById('strengthText')

        strengthBar.className = 'strength-bar'

        if (strength < 3) {
          strengthBar.classList.add('strength-weak')
          feedback = 'Weak'
        } else if (strength < 4) {
          strengthBar.classList.add('strength-fair')
          feedback = 'Fair'
        } else if (strength < 5) {
          strengthBar.classList.add('strength-good')
          feedback = 'Good'
        } else {
          strengthBar.classList.add('strength-strong')
          feedback = 'Strong'
        }

        strengthText.textContent = feedback
        return strength >= 3
      }

      // Form validation
      function validateField(field, validator, errorMsg) {
        const errorElement = document.getElementById(field.id + 'Error')
        const isValid = validator(field.value)

        if (isValid) {
          field.classList.remove('invalid')
          field.classList.add('valid')
          errorElement.textContent = ''
        } else {
          field.classList.remove('valid')
          field.classList.add('invalid')
          errorElement.textContent = errorMsg
        }

        return isValid
      }

      // Event listeners for real-time validation
      document
        .getElementById('firstName')
        .addEventListener('blur', function () {
          validateField(
            this,
            val => val.trim().length >= 2,
            'First name must be at least 2 characters'
          )
        })

      document.getElementById('lastName').addEventListener('blur', function () {
        validateField(
          this,
          val => val.trim().length >= 2,
          'Last name must be at least 2 characters'
        )
      })

      document.getElementById('email').addEventListener('blur', function () {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        validateField(
          this,
          val => emailRegex.test(val),
          'Please enter a valid email address'
        )
      })

      document
        .getElementById('password')
        .addEventListener('input', function () {
          const isStrong = checkPasswordStrength(this.value)
          validateField(
            this,
            val => val.length >= 8 && isStrong,
            'Password must be at least 8 characters with mixed case, numbers, and symbols'
          )

          // Also validate confirm password if it has a value
          const confirmPassword = document.getElementById('confirmPassword')
          if (confirmPassword.value) {
            validateField(
              confirmPassword,
              val => val === this.value,
              'Passwords do not match'
            )
          }
        })

      document
        .getElementById('confirmPassword')
        .addEventListener('blur', function () {
          const password = document.getElementById('password').value
          validateField(this, val => val === password, 'Passwords do not match')
        })

      // Handle form submission
      document
        .getElementById('registerForm')
        .addEventListener('submit', async function (e) {
          e.preventDefault()

          const registerBtn = document.getElementById('registerBtn')
          const btnText = document.getElementById('btnText')
          const btnLoading = document.getElementById('btnLoading')

          // Show loading state
          registerBtn.disabled = true
          btnText.style.display = 'none'
          btnLoading.style.display = 'inline-block'

          // Clear previous alerts
          const existingAlert = document.querySelector('.alert')
          if (existingAlert) {
            existingAlert.remove()
          }

          const formData = new FormData(this)
          const registerData = {
            firstName: formData.get('firstName'),
            lastName: formData.get('lastName'),
            email: formData.get('email'),
            password: formData.get('password'),
            confirmPassword: formData.get('confirmPassword'),
            terms: formData.get('terms') ? true : false,
            newsletter: formData.get('newsletter') ? true : false
          }

          try {
            const response = await fetch('/api/auth/register', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(registerData)
            }).catch(error => {
              console.log('error => ', error)
            })

            // Check if response exists before continuing
            if (!response) return


            if (response.status == 200) {
              // Success - show success message and redirect
              showAlert(
                'Account created successfully! Please check your email to verify your account.',
                'success'
              )

              // Clear form
              this.reset()

              // Redirect after delay
              setTimeout(() => {
                window.location.href =
                  result.redirectUrl ||
                  '/auth/login?message=Account created successfully'
              }, 3000)
            } else {
              const html = await response.text()

              const bodyContent = html.match(
                /<body[^>]*>((.|[\n\r])*)<\/body>/i
              )
              if (bodyContent && bodyContent.length > 1) {
                document.body.innerHTML = bodyContent[1]
              }
              this.reset()
              return;
            }
          } catch (error) {
            console.log('Registration error:', error)
            console.error('Registration error:', error)
            showAlert(
              'Network error. Please check your connection and try again.',
              'error'
            )
          } finally {
            // Reset button state
            registerBtn.disabled = false
            btnText.style.display = 'inline'
            btnLoading.style.display = 'none'
          }
        })

      // Show alert message
      function showAlert(message, type) {
        const alertDiv = document.createElement('div')
        alertDiv.className = `alert alert-${type}`
        alertDiv.textContent = message

        const form = document.getElementById('registerForm')
        form.parentNode.insertBefore(alertDiv, form)

        // Auto-remove after 8 seconds for success messages
        if (type === 'success') {
          setTimeout(() => {
            alertDiv.remove()
          }, 8000)
        }
      }
    </script>
  </body>
</html>
